" Python version options for Neovim {{{
let g:python_host_prog = '/usr/bin/python'
let g:python3_host_prog = '/usr/bin/python3'
" }}}
filetype plugin indent on
filetype plugin on
filetype indent on
syntax on

" Interface settings {{{
"## 256 terminal
"let g:solarized_termcolors=256
"let g:solarized_diffmode="high"
set background=dark
"https://github.com/thedenisnikulin/vim-cyberpunk
set termguicolors
" colorscheme cyberpunk

"set term=tmux-256color
"## More options
" line 
set ruler
" relative number (for eg. '12j')
set relativenumber
" show current number
set nu
" start scrolling when you are 10 lines away
set scrolloff=10
set number
" sign column for git/lsp
set signcolumn=yes
" 80th column - code might be getting messey
set colorcolumn=120

set wildmenu
"set hidden  " Useful feature, to have multiples buffer open
"cursor
set cursorline
"hi clear CursorLine 
"hi CursorLine term=bold cterm=bold guibg=Grey40
"Searching
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
match Error /{{{\|}}}/
" }}}
" General settings {{{
" set clipboard=unnamed
set clipboard+=unnamedplus
set noswapfile
set nobackup
set nowritebackup
set undodir=~/.config/nvim/undodir
set undofile

" Waiting times are painful
"set timeoutlen=500
"set ttimeoutlen=5

"Correct broken redraw
set ttyfast
set noerrorbells
set novisualbell
set t_vb=
set lazyredraw
" keep buffers open
set hidden

"Indentation
set shiftwidth=4
"tabs into spaces
set expandtab
set smartindent
set tabstop=4
set softtabstop=4
" Don't want my tab command to get overwritten
augroup expandtabFTW
    autocmd!
    autocmd FileType * setlocal expandtab
augroup END
set backspace=2
set foldmethod=marker
set cino=N-s

"uncategorized
" source .vimrc in any folder
set exrc 
set wildignore=*.so,*.sw,*.pyc
set mouse=a

" Give more space for displaying messages
set cmdheight=2

" default updatetime from 4000ms to 50 is not good for async update
set updatetime=50

" angle brackets % matching
set matchpairs+=<:>

" }}}
"Key-binding {{{
" ---------------------------------------------------------------------
let mapleader = ","

nnoremap Q <Nop>

" Explorer
nnoremap <silent> <leader>pv :Ex<CR>

" Tabs
map <silent> <F2> :tabprevious<Enter>
map <silent> <F3> :tabnext<Enter>
map <silent> <F4> :tabnew<Enter>

"Customized shortcuts
nnoremap <silent> <leader>k :next<CR>
nnoremap <silent> <leader>j :previous<CR>
nnoremap <silent> <leader>q :q<cr>
nnoremap <silent> <leader>w :w!<cr>
nnoremap <silent> <leader>gs :Git<CR>
" nnoremap <silent> <leader>s :!tmux new-window -n "runner-vim" -d 'make; read' <CR>
" nnoremap <silent> <leader>c :!tmux new-window -n "runner-vim" -d 'make clean; read' <CR> 
"nnoremap <silent> <leader>E :bd .git/index<CR>
nnoremap <silent> <leader>d :Gdiff<CR>
nnoremap <silent> <leader>/ :nohlsearch<CR>
nnoremap <leader><space> :noh<cr>
"Replace
"https://vi.stackexchange.com/questions/13689/how-to-find-and-replace-in-vim-without-having-to-type-the-original-word
"Put the cursor on the word u want to change and hit leader+r followed by the
"string u want to replace with.
nnoremap <leader>r :,$s/\<<C-r><C-w>\>//gc\|1,''-&&<left><left><left><left><left><left><left><left><left><left><left>
noremap <C-J> <C-W><C-J>
noremap <C-H> <C-W><C-H>
noremap <C-K> <C-W><C-K>
noremap <C-L> <C-W><C-L>
noremap <C-]> <C-W><C-S>
noremap <C-\> <C-W><C-V>
noremap <C-Q> <C-W><C-Q>
" map redo
nnoremap <C-Z> <C-R> 
"nnoremap <leader>. :CtrlPTag<CR>
" Ctrl + t for going up tag stack
"nnoremap <leader>[ :tp<CR>
"nnoremap <leader>] :tn<CR>
"nnoremap <silent> # <C-z>

" Spelling
set spelllang=en_gb
set spell

" https://vi.stackexchange.com/questions/68/autocorrect-spelling-mistakes
" Go back to last misspelled word and pick first suggestion.
autocmd FileType markdown,vimwiki inoremap <C-L> <C-G>u<Esc>[s1z=`]a<C-G>u

" Select last misspelled word (typing will edit).
autocmd FileType markdown,vimwiki noremap <C-J> <Esc>[sve<C-G>
autocmd FileType markdown,vimwiki noremap <C-J> <Esc>[sve<C-G>
autocmd FileType markdown,vimwiki noremap <C-J> <Esc>b[sviw<C-G>

" makefiles need tabs
autocmd FileType make setlocal noexpandtab

" Code formatters
autocmd FileType cpp,c  nnoremap <silent> <leader>o :!clang-format --style=LLVM -i %:p <CR>
autocmd FileType python nnoremap <silent> <leader>o :!autopep8 -i -a --ignore=E128 --max-line-length=120 %p <CR>

" Open file where I exit last 
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" To see carriage returns for windows files
set fileformats=unix
"Great map which saves the file in sudo mode, something like `sudo !!`
cnoremap w!! w !sudo tee >/dev/null %

ab W w
ab Wq wq
ab wQ wq
ab WQ wq
ab Q q
ab WQA wqa
ab Wqa wqa

" The hard way
" nmap <Up> <Nop>
" nmap <Down> <Nop>
" nmap <Left> <Nop>
" nmap <Right> <Nop>

" Switching between windows
" nnoremap <C-Right>	 :vsplit 
" nnoremap <C-Left>	 :Vex<CR>
nnoremap <C-Down>	 :split 
nnoremap <C-Right>   :bnext<CR>                                                                            
nnoremap <C-Left>    :bprev<CR>
nnoremap <C-Up>		 :BufferClose<CR>
nnoremap <C-e>		 :E<CR>
nnoremap <S-Up>	     <C-w>5-
nnoremap <S-Down>      <C-w>5+
nnoremap <S-Left>      <C-w>10<
nnoremap <S-Right>     <C-w>10>
tnoremap <Esc>		 <C-\><C-n>

" close local fixlist window
nnoremap <leader>l :call ToggleQFList(0)<CR>zz
" nnoremap <leader>n :lnext<CR>zz
" nnoremap <leader>p :lprev<CR>zz
"Quickfix lixt stuffff!!!!!!!
" nnoremap <C-q> :call ToggleQFList(1)<CR>
nnoremap <silent> <leader>a :copen<CR>
nnoremap <silent> <leader>A :cclose<CR>
nnoremap <silent> <C-q> :cclose<CR>
nnoremap <leader>n :cprev<CR>zz
nnoremap <leader>p :cnext<CR>zz
"
"}}}
" C/C++ Key bindings {{{
" https://idie.ru/posts/vim-modern-cpp/
" }}}
"Plugins {{{
call plug#begin('~/.local/usr/nvim/plugged')
" colorschemes
Plug 'ray-x/starry.nvim'
Plug 'mvllow/modes.nvim'
" git snippets
Plug 'tpope/vim-fugitive'
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
" syntax highlighting
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'} 

" For vsnip users.
Plug 'hrsh7th/cmp-vsnip'
Plug 'hrsh7th/vim-vsnip'

" For function list
Plug 'simrat39/symbols-outline.nvim'

" For ultisnips users.
" Plug 'SirVer/ultisnips'
" Plug 'quangnguyen30192/cmp-nvim-ultisnips'

Plug 'preservim/nerdcommenter'
Plug 'vim-scripts/DoxygenToolkit.vim'

Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.4' }
Plug 'nvim-telescope/telescope-live-grep-args.nvim'

" for buffer list, needs nvim-web-devicons
Plug 'kyazdani42/nvim-web-devicons'
Plug 'romgrk/barbar.nvim'

"auto-setup LSP
Plug 'williamboman/mason.nvim', {'do': ':MasonUpdate'} " Optional
Plug 'williamboman/mason-lspconfig.nvim'               " Optional

Plug 'mbbill/undotree'

Plug 'nvim-lua/plenary.nvim' " don't forget to add this one if you don't have it yet!
Plug 'ThePrimeagen/harpoon'

call plug#end()
" }}}

"Nerdcommenter {{{
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_cpp = 1
let g:NERDAltDelims_c = 1
" }}}
" DoxygenToolkit {{{
" let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------"
" let g:DoxygenToolkit_blockFooter="----------------------------------------------------------------------------"
let g:DoxygenToolkit_authorName="Eashan Wadhwa"
let g:DoxygenToolkit_startCommentTag = "/// "
let g:DoxygenToolkit_interCommentTag = "/// "
let g:DoxygenToolkit_endCommentTag = "///"
let g:DoxygenToolkit_startCommentBlock = "// "
let g:DoxygenToolkit_interCommentBlock = "// "
let g:DoxygenToolkit_endCommentBlock="///"
" let g:DoxygenToolkit_licenseTag="My own license"   <-- !!! Does not end with "\<enter>"
" }}}
" Treesitter {{{
lua require ("nvim_treesitter_config")
" }}}
"Telescope {{{
lua require ("telescope_config")
"}}}
" nvim-cmp {{{ 
set completeopt=menu,menuone,noselect
runtime nvim_cmp_server.lua
" }}}
" quickfix lists {{{
let g:the_primeagen_qf_l = 0
let g:the_primeagen_qf_g = 0

fun! ToggleQFList(global)
    if a:global
        if g:the_primeagen_qf_g == 1
            let g:the_primeagen_qf_g = 0
            cclose
        else
            let g:the_primeagen_qf_g = 1
            copen
        end
    else
        if g:the_primeagen_qf_l == 1
            let g:the_primeagen_qf_l = 0
            lclose
        else
            let g:the_primeagen_qf_l = 1
            lopen
        end
    endif
endfun
" }}}
" Symbols-outline {{{
map  <silent> <leader>v :SymbolsOutline<CR>
lua require ("symbolsoutline_config")
" }}}
" Barbar {{{
lua require ("barbar_config")
" }}}
" Starry (& any other colorscheme) {{{
let starry_bold = v:true  "set to false to disable bold globally
let starry_italic = v:true "set to false to disable italic globally
let starry_italic_comments = v:true
let starry_italic_string = v:false
let starry_italic_keywords = v:false
let starry_italic_functions = v:false
let starry_italic_variables = v:false
let starry_contrast = v:true
let starry_borders = v:false
let starry_disable_background = v:true  "set to true to disable background and allow transparent background
let starry_style_fix=v:true  "disable random loading
let starry_style="moonlight"  "load moonlight everytime or
let starry_darker_contrast=v:true  "darker background
let starry_deep_black=v:true       "OLED deep black
let starry_italic_keywords=v:false
let starry_italic_functions=v:false
let starry_set_hl=v:false " Note: enable for nvim 0.6+, it is faster (loading time down to 4~6s from 7~11s), but it does
" not overwrite old values and may has some side effects
let starry_daylight_switch=v:true  "this allow using brighter color
" other themes: dracula, oceanic, dracula_blood, 'deep ocean', darker, palenight, monokai, mariana, emerald, middlenight_blue
" colorscheme
lua require('starry.functions').toggle_style()
lua require('modes_starry_config')
hi SpellBad gui=undercurl guifg=#61380b guisp=#61380b
" }}}
" UndoTree {{{
nnoremap <silent> <leader>u :UndotreeToggle<CR>
" }}}
